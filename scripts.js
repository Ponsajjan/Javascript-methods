// JS String Method
console.log("hello".charAt(4))                  // 'o' (character at index 4)
console.log("hello".length)                     // 5 (length of the string)
console.log("hello".concat("", "world"))        // 'helloworld' (concatenated string)
console.log("hello".startsWith("H"))            // false (whether string starts with 'H')
console.log("hello".endsWith("o"))              // true (whether string ends with 'o')
console.log("hello".includes("x"))              // false (whether string includes 'x')
console.log("hello".indexOf("l"))               // 2 (index of first occurrence of 'l')
console.log("hello".lastIndexOf("l"))           // 3 (index of last occurrence of 'l')
console.log("hello".match(/[A-Z]/g))            // null (no match found)
console.log("hello".padStart(6, "?"))           // '?hello' (padded string at start)
console.log("hello".padEnd(6, "?"))             // 'hello?' (padded string at end)
console.log("hello".repeat(3))                  // 'hellohellohello' (repeated string)
console.log("hello".replace("llo", "y"))        // 'hey' (replaced string)
console.log("hello".search("e"))                // 1 (index of first 'e')
console.log("hello".slice(1, 3))                // 'el' (substring from index 1 to 3)
console.log("hello".split(""))                  // ['h','e','l','l','o'] (array of characters)
console.log("hello".substring(2, 4))            // 'll' (substring from index 2 to 4)
console.log("hello".toLowerCase())              // 'hello' (string in lowercase)
console.log("hello".toUpperCase())              // 'HELLO' (string in uppercase)
console.log(" hello ".trim())                   // 'hello' (trimmed whitespace from both ends)
console.log(" hello".trimStart())               // 'hello' (trimmed whitespace from start)
console.log("hello ".trimEnd())                 // 'hello' (trimmed whitespace from end)
console.log("hello".endsWith("o"))              // true (whether string ends with 'o')
console.log("hello".localeCompare("world"))     // -1 (comparison result in the current locale)
console.log("hello".matchAll(/[A-Z]/g))         // Iterator (all matches found)
console.log("hello".normalize())                // 'hello' (Unicode Normalization Form)
console.log("hello".padEnd(8, 'abc'))           // 'helloabc' (padded string at end)
console.log("hello".toLocaleLowerCase())        // 'hello' (string in lowercase according to locale)
console.log("hello".toLocaleUpperCase())        // 'HELLO' (string in uppercase according to locale)

// JS Array Methods
console.log([4, 5, 6, 7].at(1))                                   // at() does not exist, so this will throw an error
console.log([4, 5, 6, 7][1])                                      // 5 (the element at index 1)
console.log([4, 5, 6, 7].push(8))                                 // 5 (length of the array after adding 8)
console.log([4, 5, 6, 7].pop())                                   // 7 (the removed element)
console.log([4, 5, 6, 7].fill(1))                                 // [1, 1, 1, 1] (the modified array)
console.log([4, 5, 6, 7].join(' '))                               // "4 5 6 7" (a string representation of the array with spaces between elements)
console.log([4, 5, 6, 7].slice(1, 3))                             // [5, 6] (a new array containing elements from index 1 to index 2)
console.log([4, 5, 6, 7].sort())                                  // [4, 5, 6, 7] (a sorted array)
console.log([4, 5, 6, 7].toString())                              // "4,5,6,7" (a comma-separated string representation of the array)
console.log([4, 5, 6, 7].concat(8))                               // [4, 5, 6, 7, 8] (a new array containing the elements of the original array followed by 8)
console.log([4, 5, 6, 7].splice(1, 2))                            // [5, 6] (the removed elements)
console.log([4, 5, 6, 7].forEach(item => console.log(item)))      // undefined (forEach does not return a value it just iterates over each element of the array and applies the provided function)
console.log([4, 5, 6, 7].some(item => item > 5))                  // true (at least one element in the array satisfies the condition)
console.log([4, [5, 6], 7].flat())                                // [4, 5, 6, 7] (a new array with any sub-array elements concatenated into it)
console.log([4, 5, 6, 7].length)                                  // 4 (the number of elements in the array)
console.log([4, 5, 6, 7].reduce((prev, curr) => prev + curr, 0))  // 22 (the accumulated value after applying the provided function to each element of the array)
console.log([4, 5, 6, 7].indexOf(5))                              // 1 (the index of the first occurrence of 5 in the array)
console.log([4, 5, 6, 7].shift())                                 // 4 (the removed element)
console.log([4, 5, 6, 7].unshift(3))                              // 5 (the new length of the array after adding 3)
console.log([4, 5, 6, 7].reverse())                               // [7, 6, 5, 4] (the reversed array)
console.log([4, 5, 6, 7].includes(6))                             // true (the array contains 6)
console.log([4, 5, 6, 7].map(item => 2 * item))                   // [8, 10, 12, 14] (a new array with each element doubled)
console.log([4, 5, 6, 7].filter(item => item > 5))                // [6, 7] (a new array containing elements greater than 5)
console.log([4, 5, 6, 7].find(item => item > 5))                  // 6 (the first element in the array greater than 5)
console.log([4, 5, 6, 7].every(item => item > 0))                 // true (all elements in the array are greater than 0)
console.log([4, 5, 6, 7].findIndex(item => item === 5))           // 1 (the index of the first occurrence of 5 in the array)
console.log([4, 5, 6, 7].reduce((prev, curr) => prev + curr, 0))  // 22 (the sum of all elements in the array)
console.log([4, 5, 6, 7].entries())                               // Iterator of key/value pairs for each index in the array
console.log([4, 5, 6, 7].every(item => item < 10))                // true (all elements in the array are less than 10)
console.log([4, 5, 6, 7].keys())                                  // Iterator of keys for each index in the array
console.log([4, 5, 6, 7].lastIndexOf(6))                          // 2 (the index of the last occurrence of 6 in the array)
console.log([4, 5, 6, 7].some(item => item > 10))                 // false (no element in the array satisfies the condition)
console.log([4, 5, 6, 7].values())                                // Iterator of values for each index in the array


console.log(Number.isInteger(5));               // true (checks if the value is an integer)
console.log(Number.parseFloat("3.14"));         // 3.14 (parses a string argument and returns a floating point number)
console.log(Number.parseInt("10"));             // 10 (parses a string argument and returns an integer)


console.log(Number.isNaN(NaN));                 // true (checks if the value is NaN)
console.log(Number.isFinite(Infinity));         // false (checks if the value is a finite number)
console.log(Number.MAX_VALUE);                  // 1.7976931348623157e+308 (largest positive finite value representable in JavaScript)
console.log(Number.MIN_VALUE);                  // 5e-324 (smallest positive nonzero value representable in JavaScript)
console.log(Number.MAX_SAFE_INTEGER);           // 9007199254740991 (largest integer that can be accurately represented in JavaScript)
console.log(Number.MIN_SAFE_INTEGER);           // -9007199254740991 (smallest integer that can be accurately represented in JavaScript)
console.log(Number.EPSILON);                    // 2.220446049250313e-16 (the smallest interval between two representable numbers)
console.log(Number.NaN);                        // NaN (a value representing Not-A-Number)
console.log(Number.POSITIVE_INFINITY);          // Infinity (a value representing positive infinity)
console.log(Number.NEGATIVE_INFINITY);          // -Infinity (a value representing negative infinity)


console.log(Object.keys({ a: 1, b: 2 }));              // ['a', 'b'] (array of object's own enumerable property names)
console.log(Object.values({ a: 1, b: 2 }));            // [1, 2] (array of object's own enumerable property values)
console.log(Object.entries({ a: 1, b: 2 }));           // [['a', 1], ['b', 2]] (array of object's own enumerable [key, value] pairs)

console.log(Date.now());                             // 1628074059736 (numeric value corresponding to the current time)

console.log(Math.abs(-5));                           // 5 (absolute value of a number)
console.log(Math.ceil(3.14));                        // 4 (smallest integer greater than or equal to a given number)
console.log(Math.floor(3.14));                       // 3 (largest integer less than or equal to a given number)
console.log(Math.round(3.5));                        // 4 (value of a number rounded to the nearest integer)
console.log(Math.random());                          // 0.123456789 (pseudo-random number between 0 and 1)
console.log(Math.max(1, 2, 3));                      // 3 (largest of zero or more numbers)
console.log(Math.min(1, 2, 3));                      // 1 (smallest of zero or more numbers)
console.log(Math.pow(2, 3));                         // 8 (base to the exponent power)
console.log(Math.sqrt(16));                          // 4 (square root of a number)

console.log(RegExp.prototype.exec("hello"));         // ['h', index: 0, input: 'hello', groups: undefined] (result array or null)
console.log(RegExp.prototype.test("hello"));         // true (true or false)
console.log("hello".match(/l+/g));                   // ['ll'] (matches when matching a string against a regular expression)
console.log("hello".replace("l", "y"));              // 'heyyo' (new string with specified values replaced)
console.log("hello".search("e"));                    // 1 (index of first 'e')
console.log("hello".split(""));                      // ['h', 'e', 'l', 'l', 'o'] (array of strings)
